Traceback (most recent call last):
  File "/usr/share/miniconda/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
search_result = lk.search_lightcurve('KIC 10963065',
                                     mission='Kepler',
                                     cadence='short')
lc = search_result[0:10].download_all().stitch()
pg = lc.normalize(unit='ppm').to_periodogram(normalization='psd')
pg.plot(scale='log');
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astropy/timeseries/sampled.py:414[0m, in [0;36mTimeSeries.read[0;34m(self, filename, time_column, time_format, time_scale, format, *args, **kwargs)[0m
[1;32m    412[0m [38;5;28;01mtry[39;00m:
[1;32m    413[0m     [38;5;66;03m# First we try the readers defined for the BinnedTimeSeries class[39;00m
[0;32m--> 414[0m     [38;5;28;01mreturn[39;00m [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43mread[49m[43m([49m[43mfilename[49m[43m,[49m[43m [49m[38;5;28;43mformat[39;49m[38;5;241;43m=[39;49m[38;5;28;43mformat[39;49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    416[0m [38;5;28;01mexcept[39;00m [38;5;167;01mTypeError[39;00m:
[1;32m    417[0m     [38;5;66;03m# Otherwise we fall back to the default Table readers[39;00m

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astropy/table/connect.py:62[0m, in [0;36mTableRead.__call__[0;34m(self, *args, **kwargs)[0m
[1;32m     60[0m descriptions [38;5;241m=[39m kwargs[38;5;241m.[39mpop([38;5;124m"[39m[38;5;124mdescriptions[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m)
[0;32m---> 62[0m out [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mregistry[49m[38;5;241;43m.[39;49m[43mread[49m[43m([49m[38;5;28;43mcls[39;49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m     64[0m [38;5;66;03m# For some readers (e.g., ascii.ecsv), the returned `out` class is not[39;00m
[1;32m     65[0m [38;5;66;03m# guaranteed to be the same as the desired output `cls`.  If so,[39;00m
[1;32m     66[0m [38;5;66;03m# try coercing to desired class without copying (io.registry.read[39;00m
[1;32m     67[0m [38;5;66;03m# would normally do a copy).  The normal case here is swapping[39;00m
[1;32m     68[0m [38;5;66;03m# Table <=> QTable.[39;00m

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astropy/io/registry/core.py:219[0m, in [0;36mUnifiedInputRegistry.read[0;34m(self, cls, format, cache, *args, **kwargs)[0m
[1;32m    218[0m reader [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mget_reader([38;5;28mformat[39m, [38;5;28mcls[39m)
[0;32m--> 219[0m data [38;5;241m=[39m [43mreader[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    221[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(data, [38;5;28mcls[39m):
[1;32m    222[0m     [38;5;66;03m# User has read with a subclass where only the parent class is[39;00m
[1;32m    223[0m     [38;5;66;03m# registered.  This returns the parent class, so try coercing[39;00m
[1;32m    224[0m     [38;5;66;03m# to desired subclass.[39;00m

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/lightkurve/io/kepler.py:34[0m, in [0;36mread_kepler_lightcurve[0;34m(filename, flux_column, quality_bitmask)[0m
[1;32m     11[0m [38;5;250m[39m[38;5;124;03m"""Returns a Kepler `~lightkurve.lightcurve.LightCurve`.[39;00m
[1;32m     12[0m 
[1;32m     13[0m [38;5;124;03mParameters[39;00m
[0;32m   (...)[0m
[1;32m     32[0m [38;5;124;03m    See the `~lightkurve.utils.KeplerQualityFlags` class for details on the bitmasks.[39;00m
[1;32m     33[0m [38;5;124;03m"""[39;00m
[0;32m---> 34[0m lc [38;5;241m=[39m [43mread_generic_lightcurve[49m[43m([49m
[1;32m     35[0m [43m    [49m[43mfilename[49m[43m,[49m
[1;32m     36[0m [43m    [49m[43mflux_column[49m[38;5;241;43m=[39;49m[43mflux_column[49m[43m,[49m
[1;32m     37[0m [43m    [49m[43mquality_column[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43msap_quality[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m     38[0m [43m    [49m[43mtime_format[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mbkjd[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m     39[0m [43m[49m[43m)[49m
[1;32m     41[0m [38;5;66;03m# Filter out poor-quality data[39;00m
[1;32m     42[0m [38;5;66;03m# NOTE: Unfortunately Astropy Table masking does not yet work for columns[39;00m
[1;32m     43[0m [38;5;66;03m# that are Quantity objects, so for now we remove poor-quality data instead[39;00m
[1;32m     44[0m [38;5;66;03m# of masking. Details: https://github.com/astropy/astropy/issues/10119[39;00m

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/lightkurve/io/generic.py:49[0m, in [0;36mread_generic_lightcurve[0;34m(filename, time_column, flux_column, flux_err_column, quality_column, cadenceno_column, centroid_col_column, centroid_row_column, time_format, ext)[0m
[1;32m     48[0m     warnings[38;5;241m.[39msimplefilter([38;5;124m"[39m[38;5;124mignore[39m[38;5;124m"[39m, category[38;5;241m=[39mUnitsWarning)
[0;32m---> 49[0m     tab [38;5;241m=[39m [43mTable[49m[38;5;241;43m.[39;49m[43mread[49m[43m([49m[43mhdulist[49m[43m[[49m[43mext[49m[43m][49m[43m,[49m[43m [49m[38;5;28;43mformat[39;49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mfits[39;49m[38;5;124;43m"[39;49m[43m)[49m
[1;32m     51[0m [38;5;66;03m# Make sure the meta data also includes header fields from extension #0[39;00m

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astropy/table/connect.py:62[0m, in [0;36mTableRead.__call__[0;34m(self, *args, **kwargs)[0m
[1;32m     60[0m descriptions [38;5;241m=[39m kwargs[38;5;241m.[39mpop([38;5;124m"[39m[38;5;124mdescriptions[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m)
[0;32m---> 62[0m out [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mregistry[49m[38;5;241;43m.[39;49m[43mread[49m[43m([49m[38;5;28;43mcls[39;49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m     64[0m [38;5;66;03m# For some readers (e.g., ascii.ecsv), the returned `out` class is not[39;00m
[1;32m     65[0m [38;5;66;03m# guaranteed to be the same as the desired output `cls`.  If so,[39;00m
[1;32m     66[0m [38;5;66;03m# try coercing to desired class without copying (io.registry.read[39;00m
[1;32m     67[0m [38;5;66;03m# would normally do a copy).  The normal case here is swapping[39;00m
[1;32m     68[0m [38;5;66;03m# Table <=> QTable.[39;00m

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astropy/io/registry/core.py:219[0m, in [0;36mUnifiedInputRegistry.read[0;34m(self, cls, format, cache, *args, **kwargs)[0m
[1;32m    218[0m reader [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mget_reader([38;5;28mformat[39m, [38;5;28mcls[39m)
[0;32m--> 219[0m data [38;5;241m=[39m [43mreader[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    221[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(data, [38;5;28mcls[39m):
[1;32m    222[0m     [38;5;66;03m# User has read with a subclass where only the parent class is[39;00m
[1;32m    223[0m     [38;5;66;03m# registered.  This returns the parent class, so try coercing[39;00m
[1;32m    224[0m     [38;5;66;03m# to desired subclass.[39;00m

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astropy/io/fits/connect.py:263[0m, in [0;36mread_table_fits[0;34m(input, hdu, astropy_native, memmap, character_as_bytes, unit_parse_strict, mask_invalid)[0m
[1;32m    261[0m [38;5;66;03m# In the loop below we access the data using data[col.name] rather than[39;00m
[1;32m    262[0m [38;5;66;03m# col.array to make sure that the data is scaled correctly if needed.[39;00m
[0;32m--> 263[0m data [38;5;241m=[39m [43mtable[49m[38;5;241;43m.[39;49m[43mdata[49m
[1;32m    265[0m columns [38;5;241m=[39m []

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astropy/utils/decorators.py:841[0m, in [0;36mlazyproperty.__get__[0;34m(self, obj, owner)[0m
[1;32m    840[0m [38;5;28;01mif[39;00m val [38;5;129;01mis[39;00m _NotFound:
[0;32m--> 841[0m     val [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mfget[49m[43m([49m[43mobj[49m[43m)[49m
[1;32m    842[0m     obj_dict[[38;5;28mself[39m[38;5;241m.[39m_key] [38;5;241m=[39m val

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astropy/io/fits/hdu/table.py:440[0m, in [0;36m_TableBaseHDU.data[0;34m(self)[0m
[1;32m    438[0m [38;5;129m@lazyproperty[39m
[1;32m    439[0m [38;5;28;01mdef[39;00m [38;5;21mdata[39m([38;5;28mself[39m):
[0;32m--> 440[0m     data [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_get_tbdata[49m[43m([49m[43m)[49m
[1;32m    441[0m     data[38;5;241m.[39m_coldefs [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mcolumns

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astropy/io/fits/hdu/table.py:191[0m, in [0;36m_TableLikeHDU._get_tbdata[0;34m(self)[0m
[1;32m    190[0m [38;5;28;01melse[39;00m:
[0;32m--> 191[0m     raw_data [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_get_raw_data[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_nrows[49m[43m,[49m[43m [49m[43mcolumns[49m[38;5;241;43m.[39;49m[43mdtype[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_data_offset[49m[43m)[49m
[1;32m    192[0m     [38;5;28;01mif[39;00m raw_data [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m    193[0m         [38;5;66;03m# This can happen when a brand new table HDU is being created[39;00m
[1;32m    194[0m         [38;5;66;03m# and no data has been assigned to the columns, which case just[39;00m
[1;32m    195[0m         [38;5;66;03m# return an empty array[39;00m

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astropy/io/fits/hdu/base.py:549[0m, in [0;36m_BaseHDU._get_raw_data[0;34m(self, shape, code, offset)[0m
[1;32m    548[0m [38;5;28;01melif[39;00m [38;5;28mself[39m[38;5;241m.[39m_file:
[0;32m--> 549[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_file[49m[38;5;241;43m.[39;49m[43mreadarray[49m[43m([49m[43moffset[49m[38;5;241;43m=[39;49m[43moffset[49m[43m,[49m[43m [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mcode[49m[43m,[49m[43m [49m[43mshape[49m[38;5;241;43m=[39;49m[43mshape[49m[43m)[49m
[1;32m    550[0m [38;5;28;01melse[39;00m:

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astropy/io/fits/file.py:384[0m, in [0;36m_File.readarray[0;34m(self, size, offset, dtype, shape)[0m
[1;32m    382[0m                 [38;5;28;01mraise[39;00m
[0;32m--> 384[0m     [38;5;28;01mreturn[39;00m [43mnp[49m[38;5;241;43m.[39;49m[43mndarray[49m[43m([49m
[1;32m    385[0m [43m        [49m[43mshape[49m[38;5;241;43m=[39;49m[43mshape[49m[43m,[49m[43m [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mdtype[49m[43m,[49m[43m [49m[43moffset[49m[38;5;241;43m=[39;49m[43moffset[49m[43m,[49m[43m [49m[43mbuffer[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_mmap[49m
[1;32m    386[0m [43m    [49m[43m)[49m
[1;32m    387[0m [38;5;28;01melse[39;00m:

[0;31mTypeError[0m: buffer is too small for requested array

During handling of the above exception, another exception occurred:

[0;31mValueError[0m                                Traceback (most recent call last)
File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/lightkurve/io/read.py:93[0m, in [0;36mread[0;34m(path_or_url, **kwargs)[0m
[1;32m     92[0m [38;5;28;01mif[39;00m filetype [38;5;241m==[39m [38;5;124m"[39m[38;5;124mKeplerLightCurve[39m[38;5;124m"[39m:
[0;32m---> 93[0m     [38;5;28;01mreturn[39;00m [43mKeplerLightCurve[49m[38;5;241;43m.[39;49m[43mread[49m[43m([49m[43mpath_or_url[49m[43m,[49m[43m [49m[38;5;28;43mformat[39;49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mkepler[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m     94[0m [38;5;28;01melif[39;00m filetype [38;5;241m==[39m [38;5;124m"[39m[38;5;124mTessLightCurve[39m[38;5;124m"[39m:

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/lightkurve/lightcurve.py:3159[0m, in [0;36mKeplerLightCurve.read[0;34m(cls, *args, **kwargs)[0m
[1;32m   3158[0m     kwargs[[38;5;124m"[39m[38;5;124mformat[39m[38;5;124m"[39m] [38;5;241m=[39m [38;5;124m"[39m[38;5;124mkepler[39m[38;5;124m"[39m
[0;32m-> 3159[0m [38;5;28;01mreturn[39;00m [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43mread[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astropy/timeseries/sampled.py:420[0m, in [0;36mTimeSeries.read[0;34m(self, filename, time_column, time_format, time_scale, format, *args, **kwargs)[0m
[1;32m    419[0m [38;5;28;01mif[39;00m time_column [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m--> 420[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m    421[0m         [38;5;124m"[39m[38;5;124m``time_column`` should be provided since the default Table readers[39m[38;5;124m"[39m
[1;32m    422[0m         [38;5;124m"[39m[38;5;124m are being used.[39m[38;5;124m"[39m
[1;32m    423[0m     )
[1;32m    425[0m table [38;5;241m=[39m Table[38;5;241m.[39mread(filename, [38;5;28mformat[39m[38;5;241m=[39m[38;5;28mformat[39m, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)

[0;31mValueError[0m: ``time_column`` should be provided since the default Table readers are being used.

The above exception was the direct cause of the following exception:

[0;31mLightkurveError[0m                           Traceback (most recent call last)
Cell [0;32mIn[7], line 4[0m
[1;32m      1[0m search_result [38;5;241m=[39m lk[38;5;241m.[39msearch_lightcurve([38;5;124m'[39m[38;5;124mKIC 10963065[39m[38;5;124m'[39m,
[1;32m      2[0m                                      mission[38;5;241m=[39m[38;5;124m'[39m[38;5;124mKepler[39m[38;5;124m'[39m,
[1;32m      3[0m                                      cadence[38;5;241m=[39m[38;5;124m'[39m[38;5;124mshort[39m[38;5;124m'[39m)
[0;32m----> 4[0m lc [38;5;241m=[39m [43msearch_result[49m[43m[[49m[38;5;241;43m0[39;49m[43m:[49m[38;5;241;43m10[39;49m[43m][49m[38;5;241;43m.[39;49m[43mdownload_all[49m[43m([49m[43m)[49m[38;5;241m.[39mstitch()
[1;32m      5[0m pg [38;5;241m=[39m lc[38;5;241m.[39mnormalize(unit[38;5;241m=[39m[38;5;124m'[39m[38;5;124mppm[39m[38;5;124m'[39m)[38;5;241m.[39mto_periodogram(normalization[38;5;241m=[39m[38;5;124m'[39m[38;5;124mpsd[39m[38;5;124m'[39m)
[1;32m      6[0m pg[38;5;241m.[39mplot(scale[38;5;241m=[39m[38;5;124m'[39m[38;5;124mlog[39m[38;5;124m'[39m);

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/lightkurve/utils.py:563[0m, in [0;36msuppress_stdout.<locals>.wrapper[0;34m(*args, **kwargs)[0m
[1;32m    561[0m sys[38;5;241m.[39mstdout [38;5;241m=[39m devnull
[1;32m    562[0m [38;5;28;01mtry[39;00m:
[0;32m--> 563[0m     [38;5;28;01mreturn[39;00m [43mf[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    564[0m [38;5;66;03m# restore to default[39;00m
[1;32m    565[0m [38;5;28;01mfinally[39;00m:
[1;32m    566[0m     sys[38;5;241m.[39mstdout [38;5;241m=[39m old_out

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/lightkurve/search.py:494[0m, in [0;36mSearchResult.download_all[0;34m(self, quality_bitmask, download_dir, cutout_size, **kwargs)[0m
[1;32m    491[0m products [38;5;241m=[39m []
[1;32m    492[0m [38;5;28;01mfor[39;00m idx [38;5;129;01min[39;00m [38;5;28mrange[39m([38;5;28mlen[39m([38;5;28mself[39m[38;5;241m.[39mtable)):
[1;32m    493[0m     products[38;5;241m.[39mappend(
[0;32m--> 494[0m         [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_download_one[49m[43m([49m
[1;32m    495[0m [43m            [49m[43mtable[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mtable[49m[43m[[49m[43midx[49m[43m [49m[43m:[49m[43m [49m[43midx[49m[43m [49m[38;5;241;43m+[39;49m[43m [49m[38;5;241;43m1[39;49m[43m][49m[43m,[49m
[1;32m    496[0m [43m            [49m[43mquality_bitmask[49m[38;5;241;43m=[39;49m[43mquality_bitmask[49m[43m,[49m
[1;32m    497[0m [43m            [49m[43mdownload_dir[49m[38;5;241;43m=[39;49m[43mdownload_dir[49m[43m,[49m
[1;32m    498[0m [43m            [49m[43mcutout_size[49m[38;5;241;43m=[39;49m[43mcutout_size[49m[43m,[49m
[1;32m    499[0m [43m            [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m,[49m
[1;32m    500[0m [43m        [49m[43m)[49m
[1;32m    501[0m     )
[1;32m    502[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(products[[38;5;241m0[39m], TargetPixelFile):
[1;32m    503[0m     [38;5;28;01mreturn[39;00m TargetPixelFileCollection(products)

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/lightkurve/search.py:354[0m, in [0;36mSearchResult._download_one[0;34m(self, table, quality_bitmask, download_dir, cutout_size, **kwargs)[0m
[1;32m    352[0m     path [38;5;241m=[39m download_response[[38;5;124m"[39m[38;5;124mLocal Path[39m[38;5;124m"[39m]
[1;32m    353[0m     log[38;5;241m.[39mdebug([38;5;124m"[39m[38;5;124mFinished downloading.[39m[38;5;124m"[39m)
[0;32m--> 354[0m [38;5;28;01mreturn[39;00m [43mread[49m[43m([49m[43mpath[49m[43m,[49m[43m [49m[43mquality_bitmask[49m[38;5;241;43m=[39;49m[43mquality_bitmask[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/lightkurve/io/read.py:114[0m, in [0;36mread[0;34m(path_or_url, **kwargs)[0m
[1;32m    111[0m         [38;5;28;01mreturn[39;00m KeplerLightCurve[38;5;241m.[39mread(path_or_url, [38;5;28mformat[39m[38;5;241m=[39m[38;5;124m"[39m[38;5;124mkepseismic[39m[38;5;124m"[39m, [38;5;241m*[39m[38;5;241m*[39mkwargs)
[1;32m    112[0m [38;5;28;01mexcept[39;00m [38;5;167;01mBaseException[39;00m [38;5;28;01mas[39;00m exc:
[1;32m    113[0m     [38;5;66;03m# ensure path_or_url is in the error[39;00m
[0;32m--> 114[0m     [38;5;28;01mraise[39;00m LightkurveError(
[1;32m    115[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mError in reading Data product [39m[38;5;132;01m{[39;00mpath_or_url[38;5;132;01m}[39;00m[38;5;124m of type [39m[38;5;132;01m{[39;00mfiletype[38;5;132;01m}[39;00m[38;5;124m .[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m
[1;32m    116[0m         [38;5;124m"[39m[38;5;124mThis file may be corrupt due to an interrupted download. [39m[38;5;124m"[39m
[1;32m    117[0m         [38;5;124m"[39m[38;5;124mPlease remove it from your disk and try again.[39m[38;5;124m"[39m
[1;32m    118[0m         ) [38;5;28;01mfrom[39;00m [38;5;21;01mexc[39;00m
[1;32m    120[0m [38;5;66;03m# Official data products;[39;00m
[1;32m    121[0m [38;5;66;03m# if the filetype is recognized, instantiate a class of that name[39;00m
[1;32m    122[0m [38;5;28;01mif[39;00m filetype [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

[0;31mLightkurveError[0m: Error in reading Data product /home/runner/.lightkurve/cache/mastDownload/Kepler/kplr010963065_sc_Q001003330033033302/kplr010963065-2010203174610_slc.fits of type KeplerLightCurve .
This file may be corrupt due to an interrupted download. Please remove it from your disk and try again.
LightkurveError: Error in reading Data product /home/runner/.lightkurve/cache/mastDownload/Kepler/kplr010963065_sc_Q001003330033033302/kplr010963065-2010203174610_slc.fits of type KeplerLightCurve .
This file may be corrupt due to an interrupted download. Please remove it from your disk and try again.

