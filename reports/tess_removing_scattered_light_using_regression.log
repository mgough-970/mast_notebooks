Traceback (most recent call last):
  File "/usr/share/miniconda/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
tpf.plot(aperture_mask=aper);
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[5], line 1[0m
[0;32m----> 1[0m [43mtpf[49m[38;5;241;43m.[39;49m[43mplot[49m[43m([49m[43maperture_mask[49m[38;5;241;43m=[39;49m[43maper[49m[43m)[49m;

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/lightkurve/targetpixelfile.py:1165[0m, in [0;36mTargetPixelFile.plot[0;34m(self, ax, frame, cadenceno, bkg, column, aperture_mask, show_colorbar, mask_color, title, style, **kwargs)[0m
[1;32m   1163[0m [38;5;66;03m# Overlay the aperture mask if given[39;00m
[1;32m   1164[0m [38;5;28;01mif[39;00m aperture_mask [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m-> 1165[0m     aperture_mask [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_parse_aperture_mask[49m[43m([49m[43maperture_mask[49m[43m)[49m
[1;32m   1166[0m     [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m [38;5;28mrange[39m([38;5;28mself[39m[38;5;241m.[39mshape[[38;5;241m1[39m]):
[1;32m   1167[0m         [38;5;28;01mfor[39;00m j [38;5;129;01min[39;00m [38;5;28mrange[39m([38;5;28mself[39m[38;5;241m.[39mshape[[38;5;241m2[39m]):

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/lightkurve/targetpixelfile.py:659[0m, in [0;36mTargetPixelFile._parse_aperture_mask[0;34m(self, aperture_mask)[0m
[1;32m    653[0m     [38;5;28;01melif[39;00m (
[1;32m    654[0m         np[38;5;241m.[39missubdtype(aperture_mask[38;5;241m.[39mdtype, np[38;5;241m.[39minteger)
[1;32m    655[0m         [38;5;129;01mand[39;00m ((aperture_mask [38;5;241m&[39m [38;5;241m2[39m) [38;5;241m==[39m [38;5;241m2[39m)[38;5;241m.[39many()
[1;32m    656[0m     ):
[1;32m    657[0m         [38;5;66;03m# Kepler and TESS pipeline style integer flags[39;00m
[1;32m    658[0m         aperture_mask [38;5;241m=[39m (aperture_mask [38;5;241m&[39m [38;5;241m2[39m) [38;5;241m==[39m [38;5;241m2[39m
[0;32m--> 659[0m     [38;5;28;01melif[39;00m [38;5;28misinstance[39m(aperture_mask[38;5;241m.[39mflat[[38;5;241m0[39m], (np[38;5;241m.[39minteger, [43mnp[49m[38;5;241;43m.[39;49m[43mfloat[49m)):
[1;32m    660[0m         aperture_mask [38;5;241m=[39m aperture_mask[38;5;241m.[39mastype([38;5;28mbool[39m)
[1;32m    661[0m [38;5;28mself[39m[38;5;241m.[39m_last_aperture_mask [38;5;241m=[39m aperture_mask

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/numpy/__init__.py:305[0m, in [0;36m__getattr__[0;34m(attr)[0m
[1;32m    300[0m     warnings[38;5;241m.[39mwarn(
[1;32m    301[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mIn the future `np.[39m[38;5;132;01m{[39;00mattr[38;5;132;01m}[39;00m[38;5;124m` will be defined as the [39m[38;5;124m"[39m
[1;32m    302[0m         [38;5;124m"[39m[38;5;124mcorresponding NumPy scalar.[39m[38;5;124m"[39m, [38;5;167;01mFutureWarning[39;00m, stacklevel[38;5;241m=[39m[38;5;241m2[39m)
[1;32m    304[0m [38;5;28;01mif[39;00m attr [38;5;129;01min[39;00m __former_attrs__:
[0;32m--> 305[0m     [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m(__former_attrs__[attr])
[1;32m    307[0m [38;5;66;03m# Importing Tester requires importing all of UnitTest which is not a[39;00m
[1;32m    308[0m [38;5;66;03m# cheap import Since it is mainly used in test suits, we lazy import it[39;00m
[1;32m    309[0m [38;5;66;03m# here to save on the order of 10 ms of import time for most users[39;00m
[1;32m    310[0m [38;5;66;03m#[39;00m
[1;32m    311[0m [38;5;66;03m# The previous way Tester was imported also had a side effect of adding[39;00m
[1;32m    312[0m [38;5;66;03m# the full `numpy.testing` namespace[39;00m
[1;32m    313[0m [38;5;28;01mif[39;00m attr [38;5;241m==[39m [38;5;124m'[39m[38;5;124mtesting[39m[38;5;124m'[39m:

[0;31mAttributeError[0m: module 'numpy' has no attribute 'float'.
`np.float` was a deprecated alias for the builtin `float`. To avoid this error in existing code, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
AttributeError: module 'numpy' has no attribute 'float'.
`np.float` was a deprecated alias for the builtin `float`. To avoid this error in existing code, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations

